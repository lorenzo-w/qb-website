/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/assets/{id}": {
    /** Image typed files can be dynamically resized and transformed to fit any need. */
    get: operations["getAsset"];
  };
  "/auth/login": {
    /** Retrieve a Temporary Access Token */
    post: operations["login"];
  };
  "/auth/refresh": {
    /** Refresh a Temporary Access Token. */
    post: operations["refresh"];
  };
  "/auth/logout": {
    /** Log Out */
    post: operations["logout"];
  };
  "/auth/password/request": {
    /** Request a reset password email to be send. */
    post: operations["passwordRequest"];
  };
  "/auth/password/reset": {
    /** The request a password reset endpoint sends an email with a link to the admin app which in turn uses this endpoint to allow the user to reset their password. */
    post: operations["passwordReset"];
  };
  "/auth/sso": {
    /** List the SSO providers. */
    get: operations["sso"];
  };
  "/auth/sso/{provider}": {
    /** List the SSO providers. */
    get: operations["ssoProvider"];
  };
  "/extensions/interfaces": {
    /** List all installed custom interfaces. */
    get: operations["getInterfaces"];
  };
  "/extensions/layouts": {
    /** List all installed custom layouts. */
    get: operations["getLayouts"];
  };
  "/extensions/displays": {
    /** List all installed custom displays. */
    get: operations["getDisplays"];
  };
  "/extensions/modules": {
    /** List all installed custom modules. */
    get: operations["getModules"];
  };
  "/server/info": {
    /** Perform a system status check and return the options. */
    get: operations["serverInfo"];
  };
  "/server/ping": {
    /** Ping, pong. Ping.. pong. */
    get: operations["ping"];
  };
  "/utils/random/string": {
    /** Returns a random string of given length. */
    get: operations["random"];
  };
  "/utils/sort/{collection}": {
    /** Re-sort items in collection based on start and to value of item */
    post: operations["sort"];
  };
  "/items/about": {
    /** List the about items. */
    get: operations["readItemsAbout"];
  };
  "/items/about/{id}": {
    /** Retrieve a single about item by unique identifier. */
    get: operations["readSingleItemsAbout"];
  };
}

export interface components {
  schemas: {
    ItemsAbout: {
      user_updated?: string | null;
      cover?: string | null;
      date_updated?: string | null;
      id?: number;
      text?: string | null;
    };
  };
  responses: {
    /** Error: Not found. */
    NotFoundError: {
      content: {
        "application/json": {
          error?: {
            code?: number;
            message?: string;
          };
        };
      };
    };
    /** Error: Unauthorized request */
    UnauthorizedError: {
      content: {
        "application/json": {
          error?: {
            code?: number;
            message?: string;
          };
        };
      };
    };
  };
  parameters: {
    /** Index */
    Id: number;
    /** Unique identifier for the object. */
    UUId: string;
    /** Collection of which you want to retrieve the items from. */
    Collection: string;
    /** Filter by items that contain the given search query in one of their fields. */
    Search: string;
    /** Cursor for use in pagination. Often used in combination with limit. */
    Page: number;
    /** How many items to skip when fetching data. */
    Offset: number;
    /** Return the result as if it was a single item. Useful for selecting a single item based on filters and search queries. */
    Single: number;
    /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
    Sort: string[];
    /** What metadata to return in the response. */
    Meta: string;
    /** A limit on the number of objects that are returned. */
    Limit: number;
    /** Select items in collection by given conditions. */
    Filter: string[];
    /** Control what fields are being returned in the object. */
    Fields: string[];
    /** Controls if the API sets a cookie or returns a JWT on successful login. */
    Mode: "jwt" | "cookie";
  };
}

export interface operations {
  /** Image typed files can be dynamically resized and transformed to fit any need. */
  getAsset: {
    parameters: {
      path: {
        /** The id of the file. */
        id: string;
      };
      query: {
        /** The key of the asset size configured in settings. */
        key?: string;
        /** Width of the file in pixels. */
        width?: number;
        /** Height of the file in pixels. */
        height?: number;
        /** Fit of the file */
        fit?: "crop" | "contain" | "inside" | "outside";
        /** No image upscale. */
        withoutEnlargement?: boolean;
        /** Quality of compression. */
        quality?: number;
        /** Download the asset to your computer */
        download?: boolean;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "text/plain": string;
        };
      };
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Retrieve a Temporary Access Token */
  login: {
    responses: {
      /** Successful authentification */
      200: {
        content: {
          "application/json": {
            data?: {
              access_token?: string;
              expires?: number;
              refresh_token?: string;
            };
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** Email address of the user you're retrieving the access token for. */
          email: string;
          /** Password of the user. */
          password: string;
          /** Choose between retrieving the token as a string, or setting it as a cookie. */
          mode?: "json" | "cookie";
          /** If 2FA is enabled, you need to pass the one time password. */
          otp?: string;
        };
      };
    };
  };
  /** Refresh a Temporary Access Token. */
  refresh: {
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: {
              access_token?: string;
              expires?: number;
              refresh_token?: string;
            };
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "application/json": {
          /** JWT access token you want to refresh. This token can't be expired. */
          refresh_token?: string;
        };
      };
    };
  };
  /** Log Out */
  logout: {
    responses: {
      /** Request successful */
      200: unknown;
    };
    requestBody: {
      content: {
        "application/json": {
          /** JWT access token you want to logout. */
          refresh_token?: string;
        };
      };
    };
  };
  /** Request a reset password email to be send. */
  passwordRequest: {
    responses: {
      401: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "application/json": {
          /** Email address of the user you're requesting a reset for. */
          email: string;
        };
      };
    };
  };
  /** The request a password reset endpoint sends an email with a link to the admin app which in turn uses this endpoint to allow the user to reset their password. */
  passwordReset: {
    responses: {
      401: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "application/json": {
          /** One-time use JWT token that is used to verify the user. */
          token: string;
          /** New password for the user. */
          password: string;
        };
      };
    };
  };
  /** List the SSO providers. */
  sso: {
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            public?: boolean;
            data?: string[];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** List the SSO providers. */
  ssoProvider: {
    parameters: {
      path: {
        /** Key of the activated SSO provider. */
        provider: string;
      };
      query: {
        /** Controls if the API sets a cookie or returns a JWT on successful login. */
        mode: components["parameters"]["Mode"];
        /** Where to redirect on successful login. */
        redirect_url: string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            public?: boolean;
            data?: {
              token?: string;
            };
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** List all installed custom interfaces. */
  getInterfaces: {
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: { [key: string]: any }[];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** List all installed custom layouts. */
  getLayouts: {
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: { [key: string]: any }[];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** List all installed custom displays. */
  getDisplays: {
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: { [key: string]: any }[];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** List all installed custom modules. */
  getModules: {
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: { [key: string]: any }[];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Perform a system status check and return the options. */
  serverInfo: {
    parameters: {
      query: {
        /** The first time you create a project, the provided token will be saved and required for subsequent project installs. It can also be found and configured in `/config/__api.json` on your server. */
        super_admin_token: number;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: { [key: string]: any };
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Ping, pong. Ping.. pong. */
  ping: {
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/text": string;
        };
      };
    };
  };
  /** Returns a random string of given length. */
  random: {
    parameters: {
      query: {
        /** Length of the random string. */
        length?: number;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: string;
          };
        };
      };
    };
  };
  /** Re-sort items in collection based on start and to value of item */
  sort: {
    responses: {
      /** Successful request */
      200: unknown;
    };
    requestBody: {
      content: {
        "application/json": {
          /** Primary key of item to move */
          item?: number;
          /** Primary key of item where to move the current item to */
          to?: number;
        };
      };
    };
  };
  /** List the about items. */
  readItemsAbout: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** Return the result as if it was a single item. Useful for selecting a single item based on filters and search queries. */
        single?: components["parameters"]["Single"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schema"]["ItemsAbout"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Retrieve a single about item by unique identifier. */
  readSingleItemsAbout: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schema"]["ItemsAbout"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
}
